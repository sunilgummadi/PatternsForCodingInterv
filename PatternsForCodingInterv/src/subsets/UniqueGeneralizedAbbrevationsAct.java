/**
 * 
 */
package subsets;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

/**
 * @author gummadisunil.kumar
 *
 */
class AbbreviatedWord {
	StringBuilder str;
	int start;
	int count;

	public AbbreviatedWord(StringBuilder str, int start, int count) {
		this.str = str;
		this.start = start;
		this.count = count;
	}
}

public class UniqueGeneralizedAbbrevationsAct {

	/**
	 * Given a word write a function to generate all of its unique generalized
	 * abbreviations.
	 * 
	 * Generalized abbreviation of a word can be generated by replacing each
	 * substring of the word by the count of characters in the substring. Take the
	 * example of "ab" which has four substrings: "","a","b" and "ab". After
	 * replacing these substrings in the actual word by the content of characters we
	 * get all the generalized abbreviations: "ab","1b","a1", and "2".
	 * 
	 * Input: "BAT" Output: "BAT","BA1","B1T","B2","1AT","1A1","2T","3"
	 */
	public static void main(String[] args) {
		System.out.println("Generalized abbreviation are: " + generateGeneralizedAbbreviation("BAT"));
		System.out.println("Generalized abbreviation are: " + generateGeneralizedAbbreviation("code"));
	}

	public static List<String> generateGeneralizedAbbreviation(String word) {
		List<String> result = new ArrayList<String>();
		Queue<AbbreviatedWord> queue = new LinkedList<>();
		queue.add(new AbbreviatedWord(new StringBuilder(), 0, 0));
		int len = word.length();
		while (!queue.isEmpty()) {
			AbbreviatedWord abWord = queue.poll();
			if (abWord.start == len) {
				if (abWord.count != 0)
					abWord.str.append(abWord.count);
				result.add(abWord.str.toString());
			} else {
				// continue abbreviating by incrementing the current abbreviation count
				queue.add(new AbbreviatedWord(new StringBuilder(abWord.str), abWord.start + 1, abWord.count + 1));
				if (abWord.count != 0)
					abWord.str.append(abWord.count);
				// restart abbreviating append the count and the current character to the string
				queue.add(new AbbreviatedWord(new StringBuilder(abWord.str).append(word.charAt(abWord.start)),
						abWord.start + 1, 0));
			}
		}
		return result;
	}
}
